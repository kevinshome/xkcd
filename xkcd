#!/usr/bin/env python3
import sys
import json
import random
import signal
from urllib.parse import urlparse
from urllib.request import urlopen
from urllib.error import HTTPError
from PIL import Image, __version__ as pillow_version

__version__ = "0.2.0a0"
# initialize ^C signal
signal.signal(
    signal.SIGINT, lambda *_: (_ for _ in ()).throw(SystemExit(0))
)  # no yucky exception traceback on KeyboardInterrupt (^C)

# check for xkcd database
try:
    from xkcd_comicdb import XKCD_DATABASE_PATH
except ImportError:
    XKCD_DATABASE_PATH = None
DOWNLOAD_COMIC = False

verbose_mode = False

if len(sys.argv) == 1:
    print("usage: xkcd [-hV] [--help] [--version] [--update]\n\t    [search [QUERY]] [random] [latest] [COMIC_NUMBER]\n\t    [--download]", file=sys.stderr)
    raise SystemExit(1)

def fetch_latest_json():
    with urlopen("https://xkcd.com/info.0.json") as req:
        return json.loads(req.read())

def search_database(args):
    import sqlite3
    with sqlite3.connect(XKCD_DATABASE_PATH) as conn:
        cursor = conn.cursor()
        keyword = " ".join(args)
        sql = cursor.execute("SELECT num,safe_title FROM comics WHERE safe_title LIKE ?", ('%'+keyword+'%',))
        res = sql.fetchall()
        if len(res) > 1:
            print(f"All comics matching keyword '{keyword}':")
            for i,comic in enumerate(res):
                print(f"({i+1}) xkcd {comic[0]}: {comic[1]}")
            des_comic = input("\nWhich item would you like: ")
            comic_number = res[int(des_comic)-1][0]
        elif len(res) == 1:
            comic_number = res[0][0]
        else:
            return -1
    return comic_number

def check_for_update(update_type):
    import subprocess

    if update_type == "script":
        json_data = json.load(urlopen("https://raw.githubusercontent.com/kevinshome/xkcd/main/version.json"))
        
        if json_data["version"] == __version__:
            print("xkcd: up to date :)", file=sys.stderr)
            raise SystemExit(0)
        
        subprocess.Popen("sudo rm -f /usr/local/bin/xkcd", shell=True).wait()
        curl_proc = subprocess.Popen("sudo curl -fsSL https://raw.githubusercontent.com/kevinshome/xkcd/main/xkcd > /usr/local/bin/xkcd", shell=True)
        if curl_proc.wait() != 0:
            print("xkcd: An error occurred in curl, unable to update xkcd", file=sys.stderr)
            raise SystemExit(1)
        chmod_proc = subprocess.Popen(["sudo", "chmod", "555", "/usr/local/bin/xkcd"])
        if chmod_proc.wait() != 0:
            print("xkcd: An error occurred in chmod, unable to change file permissions.\nThis can be done manually, however, by running \"sudo chmod 555 /usr/local/bin/xkcd\"", file=sys.stderr)
            raise SystemExit(1)
        print(f"xkcd successfully updated to '{json_data['version']}'!")
    else:
        pip_proc = subprocess.Popen(["pip3", "install", "-U", "xkcd-comicdb"])
        if pip_proc.wait() != 0:
            print(f"xkcd: An error occurred in pip, unable to update xkcd-comicdb", file=sys.stderr)
            raise SystemExit(1)

    raise SystemExit(0)

if "--download" in sys.argv:
    DOWNLOAD_COMIC = True
if sys.argv[1] == '-h' or sys.argv[1] == '--help':
    print(
        "usage: xkcd [-hV] [--help] [--version] [--update]\n\t    [search [QUERY]] [random] [latest] [COMIC_NUMBER]\n\t    [--download]\n"
        "get xkcd comics, easy\n\n"
        "\t--update\tcheck for any available script updates\n"
        "\t--update-db\tcheck for any available xkcd-comicdb updates\n"
        "\t--download\tdownload a given comic to the current directory\n"
        "\n"
        "\trandom\t\tget a random comic\n"
        "\tlatest\t\tget the latest comic\n"
        "\tsearch [QUERY]\tsearch by keyword (requires database)\n"
        "\t[COMIC_NUMBER]\tget a specific comic, by number\n\n"
        "(c) 2022 Noah Tanner, released under the terms of the Unlicense\n"
        "For more information, please refer to <http://unlicense.org/>"
    )
    raise SystemExit(0)
elif sys.argv[1] == '-V' or sys.argv[1] == '--version':
    from platform import python_version
    print(f"\nxkcd {__version__}\nPillow {pillow_version}\nPython {python_version()}\n\n(c) 2022 Noah Tanner, released under the terms of the Unlicense\n")
    raise SystemExit(0)
elif sys.argv[1] == "--update":
    check_for_update("script")
elif sys.argv[1] == "--update-db":
    check_for_update("database")
elif sys.argv[1] == "search":
    if XKCD_DATABASE_PATH is None: # fail if the database is not installed
        print(
            "xkcd: search argument requires database.",
            "see https://github.com/kevinshome/xkcd/blob/main/README.md#Database for more information.", 
            file=sys.stderr
        )
        raise SystemExit(1)
    comic_number = search_database(sys.argv[2:])
    if comic_number == -1:
        print(f"xkcd: no matches found for keyword '{' '.join(sys.argv[2:])}'...", file=sys.stderr)
        raise SystemExit(1)
elif sys.argv[1] == "latest":
    comic_number = fetch_latest_json()["num"]
elif sys.argv[1] == "random":
    comic_number = random.choice(
        list(
            range(1, fetch_latest_json()["num"]+1)
        )
    )
else:
    comic_number = sys.argv[1]

try:
    json_req = urlopen(f"https://xkcd.com/{comic_number}/info.0.json")
except HTTPError as e:
    if e.code == 404:
        print(f"xkcd: unable to find comic #{comic_number}", file=sys.stderr)
        raise SystemExit(1)
    else:
        print(f"An unknown HTTP error occurred! (HTTP {e.code})", file=sys.stderr)
        raise SystemExit(1)

comic_json = json.load(json_req)
json_req.close()
img_data = urlopen(comic_json["img"])
if DOWNLOAD_COMIC:
    filename = urlparse(comic_json["img"]).path.split('/')[2]
    with open(filename, 'wb') as f:
        f.write(img_data.read())
        img_data.close()
    print(f"xkcd {comic_number} downloaded to '{filename}'")
    raise SystemExit(0)
print(
    f"xkcd {comic_json['num']}: \"{comic_json['safe_title']}\" "
    f"({comic_json['month']}.{comic_json['day']}.{comic_json['year']})\n"
    f"{comic_json['alt']}"
)
with Image.open(img_data) as comic:
    comic.show()
